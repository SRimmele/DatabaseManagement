USE app;

CREATE TABLE IF NOT EXISTS Playlist (
  playlistID INT (4) PRIMARY KEY, 
  title VARCHAR (255) NOT NULL,
  userID INT (3) NOT NULL,
  FOREIGN KEY (userID) REFERENCES User(userID)
); 

CREATE TABLE IF NOT EXISTS Artist (
	artistID INT(4) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	artistName VARCHAR(100) NOT NULL,
	songAmt INT (3) NOT NULL,
	popularity DOUBLE NOT NULL,
	link VARCHAR (255),
	mainGenre VARCHAR (100) NOT NULL,
	otherGenre VARCHAR (100) NOT NULL,
); 

CREATE TABLE IF NOT EXISTS Language (
  languageID INT (3) AUTO_INCREMENT PRIMARY KEY, 
  languageName VARCHAR (20) NOT NULL UNIQUE
); 

CREATE TABLE IF NOT EXISTS Song (
  songID INT (5) AUTO_INCREMENT PRIMARY KEY, 
  songName VARCHAR (255) NOT NULL, 
  link VARCHAR (255) NOT NULL, 
  lyrics VARCHAR (255) NOT NULL, 
  artistID INT (4) NOT NULL,
  languageID INT (3) NOT NULL,
  FOREIGN KEY (artistID) REFERENCES Artist(artistID), 
  FOREIGN KEY (languageID) REFERENCES Language(languageID)
); 



CREATE TABLE IF NOT EXISTS Playlist_Songs (
  position INT (4) NOT NULL, 
  playlistID INT (4) NOT NULL,
  songID INT (5) NOT NULL,
  FOREIGN KEY (playlistID) REFERENCES Playlist (playlistID), 
  FOREIGN KEY (songID) REFERENCES Song (songID), 
  PRIMARY KEY (position, playlistID, songID)
); 


CREATE TABLE IF NOT EXISTS Users (
  userID INT (3) AUTO_INCREMENT PRIMARY KEY, 
  username VARCHAR (100) NOT NULL UNIQUE CHECK (username < 101 AND username > 3),
  password VARCHAR (30) NOT NULL, 
  email VARCHAR (500) NOT NULL UNIQUE,
  firstName VARCHAR (30) NOT NULL, 
  lastName VARCHAR (30) NOT NULL, 
  age INT (3) NOT NULL
); 
	
CREATE TABLE IF NOT EXISTS Friends (
	userID INT(3) NOT NULL, 
	connectedToID INT(3) NOT NULL, 
  FOREIGN KEY (userID) REFERENCES User(userID), 
  FOREIGN KEY (connectedToID) REFERENCES User(userID), 
  PRIMARY KEY(userID, connectedToID)
); 

CREATE TABLE IF NOT EXISTS Recent_Songs (
  userID INT (3) NOT NULL PRIMARY KEY,
  songIDFirst INT (5),
  songIDSecond INT (5),
  songIDThird INT (5),
  songIDFourth INT (5),
  songIDFifth INT (5),
  FOREIGN KEY (userID) REFERENCES User(userID),
  FOREIGN KEY (songIDFirst) REFERENCES Song(songID),
  FOREIGN KEY (songIDSecond) REFERENCES Song(songID),
  FOREIGN KEY (songIDThird) REFERENCES Song(songID),
  FOREIGN KEY (songIDFourth) REFERENCES Song(songID),
  FOREIGN KEY (songIDFifth) REFERENCES Song(songID)
);

//add a user
INSERT INTO User VALUES ()

//songs by artist
SELECT * FROM Song WHERE artistID IN ( SELECT artistID FROM Artist WHERE artistName LIKE CONCAT('%', ?, '%') ORDER BY artistName DESC;

//songs by title
SELECT * FROM Song WHERE songName LIKE CONCAT('%', ?, '%') ORDER BY songName DESC;

//songs by lyrics
SELECT * FROM Song WHERE lyrics LIKE CONCAT('%', ?, '%') ORDER BY songName DESC;

//songs by genre (note: both ? values should be filled by the same user input)
SELECT * FROM Song WHERE artistID IN SELECT artistID FROM Artist WHERE mainGenre LIKE CONCAT('%', ?, '%') OR otherGenre LIKE CONCAT('%', ?, '%') ORDER BY songName DESC;

//show all playlists for user
SELECT title FROM Playlist WHERE userID IN SELECT userID FROM user_tracker ORDER BY title DESC;

//selected playlist for user
SELCT * FROM Playlist_Songs WHERE playlistID = ? ORDER BY position ASC;

//show all of user's friends
SELECT username FROM User WHERE userID IN SELECT connectedToID FROM friends WHERE userID IN SELECT userID FROM user_tracker ORDER BY connectedToID;

//show selected friend for user
SELECT userID, username, firstName, lastName, age FROM User WHERE userID IN SELECT userID FROM User WHERE username = ?;

//show recently listened to
SELECT * FROM Song WHERE songID IN SELECT songIDFirst, songIDSecond, songIDThird, songIDFourth, songIDFifth FROM Recent_Songs WHERE userID IN SELECT userID FROM user_tracker;

//show recently listened to by friend
SELECT * FROM Song WHERE songID IN SELECT songIDFirst, songIDSecond, songIDThird, songIDFourth, songIDFifth FROM Recent_Songs WHERE userID IN SELECT userID FROM User WHERE username = ?;

//Advanced search (subject to major change)
SELECT * FROM Song WHERE songID IN
  SELECT songID FROM Song WHERE 
    ( artistID IN SELECT artistID FROM Artist WHERE ( artistName LIKE CONCAT('%', ?, '%') OR 
